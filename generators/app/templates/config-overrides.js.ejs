/* eslint-disable no-unused-vars, no-param-reassign */
const path = require('path');

const RESOLVE_OPTIONS = {
  paths: [
    __dirname,
    path.join(__dirname, 'node_modules/react-scripts/node_modules'),
  ],
};

const webpack = require(require.resolve('webpack', RESOLVE_OPTIONS));

function shouldRuleBeDeleted(rule) {
  return !rule.test ||
    !Array.isArray(rule.test) &&
    !rule.test.test('java-script-rule.js')
}

function isCss(rule) {
  if (typeof rule.use === 'string') {
    return rule.use.includes('/css-loader/');
  } else if (typeof rule.loader === 'string') {
    return rule.loader.includes('/css-loader/');
  }
  return false;
}

function injectCssLoaderOptions(rules) {
  return rules.map(rule => {
    if (rule.oneOf) {
      return Object.assign(
        {},
        rule,
        {
          oneOf: injectCssLoaderOptions(rule.oneOf),
        }
      )
    }

    if (!Array.isArray(rule.use)) return rule;

    return Object.assign({}, rule, {
      use: rule.use.map(subRule => isCss(subRule) ? Object.assign({}, subRule, {
        options: {
          modules: true,
          localIdentName: '[path][name]__[local]--[hash:base64:5]',
        },
      }) : subRule)
    });
  })
}

module.exports = function override(config, env) {
  // do stuff with the webpack config...
  const rules = config.module.rules.filter(shouldRuleBeDeleted);

  config.plugins.push(
    new webpack.DefinePlugin({ 'process.env.TARGET': '"client"' }),
  );

  config.module.rules = injectCssLoaderOptions([
    ...rules,
    // Process JS with Babel.
    {
      test: /\.(js|jsx|mjs)$/,
      loader: require.resolve('babel-loader', RESOLVE_OPTIONS),
      include: path.resolve(path.join(__dirname, '<%= sourceRoot %>')),
      exclude: { or: [/(node_modules|bower_components)/, /\.min\.js$/] },
      options: {
        // @remove-on-eject-begin
        babelrc: false,
        presets: [require.resolve('babel-preset-react-app', RESOLVE_OPTIONS)],
        // @remove-on-eject-end
        // This is a feature of `babel-loader` for webpack (not Babel itself).
        // It enables caching results in ./node_modules/.cache/babel-loader/
        // directory for faster rebuilds.
        cacheDirectory: true,
      },
    },
  ]);

  return config;
};
/* eslint-enable */
