<% if (flow) { %>// @flow
<% } %>import * as React from 'react';

import { <%= Name %>View<% if (flow) { %>, type <%= Name %>ViewProps<% } %> } from './<%= Name %>.view';

/**
 * Module with controller for <%= Name %> component.
 *
 * @module <%= moduleName %>/controller
 */
<% if (flow) { %>
/**
 * Shape of props for <%= Name %>Controller.
 *
 * @memberof <%= moduleName %>/controller
 */
export type <%= Name %>ControllerProps = { children: ?React.Node };

/**
 * Shape of <%= Name %>Controller's State.
 *
 * @memberof <%= moduleName %>/controller
 */
type <%= Name %>ControllerState = null;
<% } %>
/**
 * Controller for <%= Name %> component.
 *
 * @extends React.PureComponent
 * @memberof <%= moduleName %>/controller
 */
class <%= Name %>Controller extends React.PureComponent<% if (flow) { %><<%= Name %>ControllerProps, <%= Name %>ControllerState><% } %> {
  // Uncomment default props if need
  // static defaultProps = {};

  /**
   * Method to generate properties for view part of component.
   *
   * @returns {<%= Name %>ViewProps} Props for view part of component.
   * @memberof <%= moduleName %>/controller.<%= Name %>Controller#
   */
  getViewProps()<% if (flow) { %>: $Exact<<%= Name %>ViewProps><% } %> {
    return {
      children: this.props.children,
    };
  }

  /**
   * React's method to render component.
   *
   * Does not render something except component's view part.
   *
   * @returns {?React.Node} View part of <%= Name %> or possible `null`.
   * @memberof <%= moduleName %>/controller.<%= Name %>Controller#
   */
  render() {
    return React.createElement(<%= Name %>View, this.getViewProps());
  }
}

export { <%= Name %>Controller };
