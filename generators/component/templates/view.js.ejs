<% if (flow) { %>// @flow
<% } %>import * as React from 'react';
import { pure } from 'recompose';
import classNames from 'classnames/bind';

import styles from './<%= Name %>.view.css';

/**
 * View part of <%= Name %> component.
 *
 * @module <%= moduleName %>/view
 */

// Use css-modules. This allows to use `cls('host') that returns styles.host's value that is real classname.
const cls = classNames.bind(styles);
<% if (flow) { %>
/**
 * Shape of <%= Name %>View's props.
 *
 * @memberof <%= moduleName %>/view
 */
type <%= Name %>ViewProps = { children: ?React.Node };
<% } %>
/**
 * Plain part of <%= Name %> component's View.
 *
 * @param {<%= Name %>ViewProps} $1 Props passed from parent component.
 * @returns {?React.Node} Rendered <%= Name %>.
 * @memberof <%= moduleName %>/view
 */
const <%= Name %>ViewPlain = ({ children }<% if (flow) { %>: <%= Name %>ViewProps<% } %>) => (
  <div className={cls('host')}>
    <%= Name %>View works!
    {children}
  </div>
);

// Uncomment default props if need
// <%= Name %>ViewPlain.defaultProps = {};

/**
 * View part of <%= Name %> exported as PureComponent to prevent extra re-renders.
 *
 * @memberof <%= moduleName %>/view
 */
const <%= Name %>View = pure(<%= Name %>ViewPlain);

export { <%= Name %>View, <%= Name %>ViewPlain };
