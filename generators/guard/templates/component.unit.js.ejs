import * as React from 'react';
import { expect } from 'chai';
import Enzyme, { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

import { <%= Name %>Component } from './<%= Name %>.component';

Enzyme.configure({ adapter: new Adapter() });

describe('<%= [FeatureName.split('/').join('::'), 'Guard'].filter(Boolean).join('::') %>::<%= Name %>::component', function() {
  let props;

  beforeEach(function() {
    props = {
      children: <div>This should be rendered only after passing <%= Name %>'s check.</div>
    };
  });

  function renderDoc(override = {}) {
    return shallow(<<%= Name %>Component {...props} {...override} />);
  }

  function renderDocWithMultipleChildren(override = {}) {
    return shallow(
      <<%= Name %>Component {...props} {...override}>
        <div>child1</div>
        <div>child2</div>
      </<%= Name %>Component>
    );
  }

  it('does not throw an error on render', function() {
    expect(renderDoc).not.to.throw(Error);
  });

  it('renders nothing by default', function() {
    expect(renderDoc().getElement()).to.be.equal(null);
  });

  it('renders single child from #children in case of #accessAllowed=true', function(done) {
    const doc = renderDoc();

    doc.setState(
      { accessAllowed: true },
      () => {
        expect(doc.text()).to.be.equal("This should be rendered only after passing <%= Name %>'s check,");
        done();
      });
  });

  it('renders many children from #children in case of #accessAllowed=true', function(done) {
    const doc = renderDocWithMultipleChildren();

    doc.setState(
      { accessAllowed: true },
      () => {
        expect(doc.text()).to.include('child1');
        expect(doc.text()).to.include('child2');
        done();
      });
  });

  it('calls external check while mounting', function() {
    // TODO: Write check and pass it into component
  });
});
