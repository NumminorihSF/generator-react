<% if (flow) { %>// @flow
<% } %>import * as React from 'react';
import { connect } from 'react-redux';

import { <%= Name %>Component<% if (flow) { %>, type <%= Name %>ComponentProps<% } %> } from './<%= Name %>.component';

/**
 * Method to get guard's props.
 *
 * Use global application's state and props passed from parent component for generate props
 * via selectors.
 *
 * @param {any} state Global application's state.
 * @param {Object} ownProps Props passed from parent component.
     By default should not be used.
 * @returns {Object} props
 */
function mapStateToProps(state, ownProps) {
  // TODO: use selectors to get props for component from global state.
  return {};
}

const mapActionToProps = {
  // TODO: pass action creators into component.
};
<% if (flow) { %>
export type <%= Name %>ConnectedProps = $Diff<<%= Name %>ComponentProps, $Call<typeof mapStateToProps, any, any>>;
<% } %>
export const <%= Name %>Connected<% if (flow) { %>: React.Component<<%= Name %>ConnectedProps, any><% } %> = connect(
  mapStateToProps,
  mapActionToProps,
)(<%= Name %>Component);
