<% if (flow) { %>// @flow
import type { Saga } from 'redux-saga';

<% } %>import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';

<% if (flow) { %>import * as Action from './<%= Name %>.actions';
import { type <%= Name %>Dto, type <%= Name %>ListDto } from './<%= Name %>.dto';
<% } %>import * as Api from './<%= Name %>.api';
import * as ActionType from './<%= Name %>.actionTypes';
import { dtoToRecord } from './<%= Name %>.utils';
/**
 * Module that stores all sagas and work with requests' logic for <%= Name %>.
 *
 * @module <%= moduleName %>/sagas
 */

/**
 * Saga that try to load single <%= name %> and sets it into store.
 *
 * @param {Action.load<%= Name %>ByKey} action - Action that initialize loading.
 *     It's a result, of action creator call, not itself. Action's payload
 *     should be the same type and shape as `API.fetch<%= Name %>` needs.
 * @private
 * @memberof <%= moduleName %>/sagas
 */
export function* load<%= Name %>(action<% if (flow) { %>: $Call<typeof Action.load<%= Name %>ByKey, any><% } %>): Saga<*> {
  try {
    const fetch<%= Name %>Result<% if (flow) { %>: Api.Fetch<%= Name %>Result <% } %> = yield call(Api.fetch<%= Name %>, action.payload);
    const { data: <%= name %>Dto } = fetch<%= Name %>Result;

    yield put(Action.set<%= Name %>({ <%= name %>: dtoToRecord(<%= name %>Dto), time: Date.now() }));
    yield put(Action.load<%= Name %>ByKeySuccess(action.payload.<%= name %>Id));
  } catch (anyError) {
    const error: Api.Fetch<%= Name %>Error = anyError;

    yield put(Action.load<%= Name %>ByKeyFailed({ <%= name %>Id: action.payload.<%= name %>Id, error }));
  }
}

/**
 * Saga that try to save single <%= name %>.
 *
 * @param {Action.save<%= Name %>} action - Action that initialize saving.
 *     It's a result, of action creator call, not itself. Action's payload
 *     should be the same type and shape as `API.save<%= Name %>` or `API.create<%= Name %>` needs.
 * @private
 * @memberof <%= moduleName %>/sagas
 */
export function* save<%= Name %>(action<% if (flow) { %>: $Call<typeof Action.save<%= Name %>, any><% } %>): Saga<*> {
  try {
    const apiAction = action.payload.<%= name %>Id ? Api.save<%= Name %> : Api.create<%= Name %>;
    const save<%= Name %>Result<% if (flow) { %>: Api.Save<%= Name %>Result <% } %> = yield call(apiAction, action.payload.<%= name %>);
    const { data: <%= name %>Dto } = save<%= Name %>Result;

    yield put(Action.set<%= Name %>({ <%= name %>: dtoToRecord(<%= name %>Dto), time: Date.now() }));
    yield put(Action.save<%= Name %>Success(action.payload.<%= name %>Id || <%= name %>Dto.id));
  } catch (anyError) {
    const error: Api.Save<%= Name %>Error = anyError;

    yield put(Action.save<%= Name %>Failed({ <%= name %>Id: action.payload.<%= name %>Id, error }));
  }
}

/**
 * Saga that try to delete single <%= name %>.
 *
 * @param {Action.delete<%= Name %>ByKey} action - Action that initialize deleting.
 *     It's a result, of action creator call, not itself. Action's payload
 *     should be the same type and shape as `API.delete<%= Name %>ByKey` needs.
 * @private
 * @memberof <%= moduleName %>/sagas
 */
export function* delete<%= Name %>(action<% if (flow) { %>: $Call<typeof Action.delete<%= Name %>ByKey, any><% } %>): Saga<*> {
  try {
    yield call(Api.delete<%= Name %>, action.payload);
    yield put(Action.delete<%= Name %>ByKeySuccess(action.payload.<%= name %>Id));
  } catch (anyError) {
    const error: Api.Delete<%= Name %>Error = anyError;

    yield put(Action.delete<%= Name %>ByKeyFailed({ <%= name %>Id: action.payload.<%= name %>Id, error }));
  }
}

/**
 * Saga that try to load list of <%= name %> and sets them into store.
 *
 * @param {Action.load<%= Name %>List} action - Action that initialize loading.
 *     It's a result, of action creator call, not itself. Action's payload
 *     should be the same type and shape as  `API.fetch<%= Name %>List` needs.
 * @private
 * @memberof <%= moduleName %>/sagas
 */
export function* load<%= Name %>List(action<% if (flow) { %>: $Call<typeof Action.load<%= Name %>List, any><% } %>): Saga<*> {
  try {
    const fetch<%= Name %>ListResult<% if (flow) { %>: Api.Fetch<%= Name %>ListResult<% } %> = yield call(Api.fetch<%= Name %>List, action.payload);
    const { data: <%= name %>ListDto } = fetch<%= Name %>ListResult

    yield put(Action.set<%= Name %>List({ <%= name %>List: <%= name %>ListDto.results.map(dtoToRecord), time: Date.now() }));
    // TODO set pagination query
    yield put(Action.load<%= Name %>ListSuccess());
  } catch (anyError) {
    const error: Api.Fetch<%= Name %>ListError = anyError;

    yield put(Action.load<%= Name %>ListFailed(error));
  }
}

/**
 * Takes every <%= Name %>.LOAD action and runs `load<%= Name %>` saga.
 *
 * `load<%= Name %>` may works in parallel.
 *
 * @memberof <%= moduleName %>/sagas
 */
export function* load<%= Name %>Saga(): Saga<*> {
  yield takeEvery(ActionType.LOAD, load<%= Name %>);
}

/**
 * Takes every <%= Name %>.LOAD_LIST action and runs `load<%= Name %>List` saga.
 *
 * Only last call of `load<%= Name %>List` will save the data into store.
 * @memberof <%= moduleName %>/sagas
 */
export function* load<%= Name %>ListSaga(): Saga<*> {
  yield takeLatest(ActionType.LOAD_LIST, load<%= Name %>List);
}

/**
 * Takes every <%= Name %>.SAVE action and runs `save<%= Name %>` saga.
 *
 * `save<%= Name %>` may works in parallel.
 *
 * @memberof <%= moduleName %>/sagas
 */
export function* save<%= Name %>Saga(): Saga<*> {
  yield takeEvery(ActionType.SAVE, save<%= Name %>);
}

/**
 * Takes every <%= Name %>.DELETE action and runs `delete<%= Name %>` saga.
 *
 * `delete<%= Name %>` may works in parallel.
 *
 * @memberof <%= moduleName %>/sagas
 */
export function* delete<%= Name %>Saga(): Saga<*> {
  yield takeEvery(ActionType.DELETE, delete<%= Name %>);
}

export const runnable<%= Name %>Sagas = [
  load<%= Name %>Saga,
  load<%= Name %>ListSaga,
  save<%= Name %>Saga,
  delete<%= Name %>Saga,
];
