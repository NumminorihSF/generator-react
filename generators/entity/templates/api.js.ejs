<% if (flow) { %>// @flow
<% } %>import http, * as Axios from 'axios'; // use internal module if need
<% if (flow) { %>
import type {
  <%= Name%>ReadDto,
  <%= Name%>WriteDto,
  <%= Name%>ListReadDto,
  <%= Name %>LoadErrorDto,
  <%= Name %>SaveErrorDto,
  <%= Name %>DeleteDto,
  <%= Name %>DeleteErrorDto,
} from './<%= Name%>.dto';
<% } %>
/**
 * Requests to API for working with <%= Name %>.
 *
 * @module <%= moduleName %>/api
 */

/**
 * Performs request to the api for load single instance of <%= Name %>.
 *
 * @param {Object} params Parameters for load instance of <%= Name %>.
 * @param {string} params.<%= name %>Id The <%= Name %>'s id. Is used to get it from api.
 * @returns {Object} Promise-like object.
 * @memberof <%= moduleName %>/api
 */
export function fetch<%= Name %>({ <%= name %>Id }<% if (flow) { %>: { <%= name %>Id: string }<% } %>) {
  return http.request({
    method: 'get',
    url: `/api/v1/<%= name %>/${<%= name %>Id}`,
  });
}

export type Fetch<%= Name %>Result = Axios.AxiosXHR<<%= Name%>ReadDto>;
export type Fetch<%= Name %>Error = Error | Axios.AxiosError<<%= Name %>LoadErrorDto>;

/**
 * Performs request to the api for load list of <%= Name %>.
 *
 * @param {Object} params Parameters for load list of <%= Name %>.
 * @param {Object} params.query Query that filters list of <%= Name %>.
 * @returns {Object} Promise-like object.
 * @memberof <%= moduleName %>/api
 */
export function fetch<%= Name %>List({ query }<% if (flow) { %>: *<% } %>) {
  return http.request({
    method: 'get',
    url: `/api/v1/<%= name %>`,
    params: query,
  });
}

export type Fetch<%= Name %>ListResult = Axios.AxiosXHR<<%= Name%>ListReadDto>;
export type Fetch<%= Name %>ListError = Error | Axios.AxiosError<<%= Name %>LoadErrorDto>;

/**
 * Performs request to the api for changing existed instance of <%= Name %>.
 *
 * @param {<%= Name%>Dto} <%= name %> Updated instance of <%= Name %>.
 * @returns {Object} Promise-like object.
 * @memberof <%= moduleName %>/api
 */
export function save<%= Name %>(<%= name %><% if (flow) { %>: <%= Name%>WriteDto<% } %>) {
  return http.request({
    method: 'put',
    url: `/api/v1/<%= name %>/${<%= name %>.id}`,
    data: <%= name %>,
  });
}

export type Save<%= Name %>Result = Axios.AxiosXHR<<%= Name%>ReadDto>;
export type Save<%= Name %>Error = Error | Axios.AxiosError<<%= Name %>SaveErrorDto>;

/**
 * Performs request to the api for creating new instance of <%= Name %>.
 *
 * @param {<%= Name%>Dto} <%= name %> New instance of <%= Name %>.
 * @returns {Object} Promise-like object.
 * @memberof <%= moduleName %>/api
 */
export function create<%= Name %>(<%= name %><% if (flow) { %>: <%= Name%>WriteDto<% } %>) {
  return http.request({
    method: 'post',
    url: `/api/v1/<%= name %>`,
    data: <%= name %>,
  });
}

export type Delete<%= Name %>Result = Axios.AxiosXHR<<%= Name%>DeleteDto>;
export type Delete<%= Name %>Error = Error | Axios.AxiosError<<%= Name %>DeleteErrorDto>;

/**
 * Performs request to the api for delete existed instance of <%= Name %>.
 *
 * @param {Object} params Parameters for delete instance of <%= Name %>.
 * @param {string} params.<%= name %>Id The <%= Name %>'s id to delete.
 * @returns {Object} Promise-like object.
 * @memberof <%= moduleName %>/api
 */
export function delete<%= Name %>({ <%= name %>Id }<% if (flow) { %>: { <%= name %>Id: string }<% } %>) {
  return http.request({
    method: 'delete',
    url: `/api/v1/<%= name %>/${<%= name %>Id}`,
  });
}
