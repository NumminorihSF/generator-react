<% if (flow) { %>// @flow
<% } %>import * as ActionType from './<%= Name %>.actionTypes';
<% if (flow) { %>import { <%= Name %> } from './<%= Name %>.record';
<% } %>import { get<%= Name %>Key, recordToDto, listQueryToListQueryDto } from './<%= Name %>.utils';

/**
 * Action creators to work with <%= Name %>.
 *
 * @module <%= moduleName %>/actions
 */

/**
 * Action for load <%= Name %> by its key.
 *
 * Real request performing is optional.
 * Code that start request is placed in <%= Name %>.sagas.js.
 * Request's code is placed in <%= Name %>.api.js file.
 *
 * @param {string} key - Some key that allow to differ 1 instance from another.
 *     It's an `id` usually.
 *
 * @returns {Action} Action with type LOAD and `{ <%= name %>Id: key }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function load<%= Name %>ByKey(key<% if (flow) { %>: string<% } %>) {
  return {
    type: ActionType.LOAD,
    payload: {
      <%= name %>Id: key,
    },
  };
}

/**
 * Action for load <%= Name %> list by some query.
 *
 * Transforms argument into query's dto and try perform request.
 * Real request performing is optional.
 * Code that start request is placed in <%= Name %>.sagas.js.
 * Request's code is placed in <%= Name %>.api.js file.
 *
 * @param {Object} listQuery - Some key that allow to differ 1 instance from another.
 *
 * @returns {Object} Action with type LOAD_LIST and `{ query }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function load<%= Name %>List(listQuery<% if (flow) { %>: { [string]: mixed }<% } %>) {
  const query = listQueryToListQueryDto(listQuery);

  return {
    type: ActionType.LOAD_LIST,
    payload: {
      query,
    },
  };
}

/**
 * Action for update or create <%= Name %>.
 *
 * Transforms record object into dto and try perform request.
 * Code that start request is placed in <%= Name %>.sagas.js.
 * Request's code is placed in <%= Name %>.api.js file.
 *
 * @param {<%= Name %>} <%= name %> - New or updated instance of <%= Name %>.
 *     This should be a Immutable.Record.
 *
 * @returns {Object} Action with type SAVE and `{ <%= name%>Id, body }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function save<%= Name %>(<%= name %><% if (flow) { %>: <%= Name %><% } %>) {
  const key = get<%= Name %>Key(<%= name %>);
  const body = recordToDto(<%= name %>);

  return {
    type: ActionType.SAVE,
    payload: {
      <%= name %>Id: key,
      <%= name %>: body,
    },
  };
}

/**
 * Action for delete <%= Name %> by key.
 *
 * Transforms record object into dto and try perform request.
 * Code that start request is placed in <%= Name %>.sagas.js.
 * Request's code is placed in <%= Name %>.api.js file.
 *
 * @param {string} key - Some key that allow to differ 1 instance from another.
 *     It's an `id` usually.
 *
 * @returns {Object} Action with type DELETE and `{ <%= name%>Id }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function delete<%= Name %>ByKey(key<% if (flow) { %>: string<% } %>) {
  return {
    type: ActionType.DELETE,
    payload: {
      <%= name%>Id: key,
    },
  };
}

/**
 * Action for delete instance of <%= Name %>.
 *
 * See delete<%= Name %>.
 *
 * @param {<%= Name %>} <%= name %> - Instance of <%= Name %> to delete.
 *     This should be a Immutable.Record.
 *
 * @returns {Object} see delete<%= Name %>.
 * @memberof <%= moduleName %>/actions
 */
export function delete<%= Name %>(<%= name %><% if (flow) { %>: <%= Name %><% } %>) {
  const key = get<%= Name %>Key(<%= name %>);

  return delete<%= Name %>ByKey(key);
}
