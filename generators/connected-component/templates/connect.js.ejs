<% if (flow) { %>// @flow
<% } %>import { connect } from 'react-redux';

import { <%= Component %><% if (flow) { %>, type <%= Component %>Props<% } %> } from '../../../../<%= componentDirectory %>/<%= Component %>';

/**
 * Method to get props for connected <%= Component %>.
 *
 *
 * Use global application's state and props passed from parent component for generate props
 * via selectors.
 *
 * @param {any} state Global application's state.
 * @param {Object} ownProps Props passed from parent component.
     By default should not be used.
 * @returns {Object} props
 * @private
 * @memberof <%= moduleName %>
 */
function mapStateToProps(state, ownProps) {
  // TODO: use selectors to get props for component from global state.
  return {};
}

/**
 * Object or function pass action creators into <%= Component %> as props.
 *
 * @private
 * @memberof <%= moduleName %>
 */
const mapActionToProps = {
  // TODO: pass action creators into component.
};
<% if (flow) { %>
/**
 * Props for <%= Name %> component.
 */
export type <%= Name %>Props = $Diff<<%= Component %>Props, $Call<typeof mapStateToProps, any, any>>;
<% } %>

/**
 * Connected version of <%= Component %>.
 *
 * Takes dummy <%= Component %> and allows it to work with global application's state.
 * Passes props created via `mapStateToProps` and `mapActionToProps` into <%= Component %>.
 */
export const <%= Name %><% if (flow) { %>: React.Component<<%= Name %>Props, any><% } %> = connect(
  mapStateToProps,
  mapActionToProps,
)(<%= Component %>);
