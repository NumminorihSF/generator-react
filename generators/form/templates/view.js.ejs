<% if (flow) { %>// @flow
<% } %>import * as React from 'react';
import { pure } from 'recompose';
import classNames from 'classnames/bind';
import { createScoped } from 'get-e2e-test-classname';
import { FormError, FormFieldError, FormField<% if (flow) { %>, type FromInternalComponentProps<% } %> } from '@saritasa/react-form';
<% if (flow) { %>
import { type <%= Name %>Values } from './<%= Name %>.values';
<% } %>
import styles from './<%= Name %>.view.css';

/**
 * View part of <%= Name %> component.
 *
 * @module <%= moduleName %>/view
 */

// Use css-modules. This allows to use `cls('host') that returns styles.host's value that is real classname.
const cls = classNames.bind(styles);
const getE2eTestClassName = createScoped('<%= kebabName %>');
const e2e = {
  myFieldError: getE2eTestClassName('myField-error'),
  error: getE2eTestClassName('error'),
};

<% if (flow) { %>
/**
 * PartShape of <%= Name %>View's props.
 *
 * @memberof <%= moduleName %>/view
 */
export type <%= Name %>ViewProps = { formName: ?React.Node };

/**
 * Shape of all props passed from main Form component.
 *
 * @property {boolean} disabledSubmit `true` if submit should be disabled.
 * @property {boolean} submitting `true` if form is in process of submitting currently.
 * @property {boolean} valid `true` if form has valid values.
 * @property {string} error main form error.
 * @property {Function} onSubmit Submit event handler.
 * @property {Function} onReset Reset event handler.
 * @property {<%= Name %>Values} values Current object with values of the form.
 * @memberof <%= moduleName %>/view
 */
type Full<%= Name %>ViewProps = <%= Name %>ViewProps & FromInternalComponentProps<<%= Name %>Values>;
<% } %>
/**
 * View part of <%= Name %> component.
 *
 * @param {Full<%= Name %>ViewProps} $1 Props passed from parent component and Form.
 * @returns {?React.Node} Rendered <%= Name %>.
 * @memberof <%= moduleName %>/view
 */
export const <%= Name %>ViewPlain = ({
  formName,
  disabledSubmit,
  submitting,
  valid,
  onSubmit,
  onReset,
  error,
}<% if (flow) { %>: Full<%= Name %>ViewProps<% } %>) => (
  <form onSubmit={onSubmit} name={formName} className={cls('host', { invalid: !valid })}>
    <FormField name="myField" />
    <FormFieldError name="myField" className={e2e.myFieldError} component="div" />
    <%= Name %>View works!
    <FormError error={error} className={e2e.error} component="div" />
    <button type="submit" name="submit" disabled={disabledSubmit}>
      {submitting ? 'Submitting' : 'Submit'}
    </button>
    <button type="reset" name="reset" onClick={onReset}>
      Reset
    </button>
  </form>
);

// Uncomment default props if need
// <%= Name %>View.defaultProps = {};

/**
 * View part of <%= Name %> exported as PureComponent to prevent extra re*renders.
 *
 * @memberof <%= moduleName %>/view
 */
export const <%= Name %>View = pure(<%= Name %>ViewPlain);
