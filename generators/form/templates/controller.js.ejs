<% if (flow) { %>// @flow
<% } %>import * as React from 'react';
import { Form<% if (flow) { %>, type FormProps<% } %> } from '@saritasa/react-form';

import { <%= Name %>View<% if (flow) { %>, type <%= Name %>ViewProps<% } %> } from './<%= Name %>.view';
import { <%= name %>FieldRules, validate<%= Name %><% if (flow) { %>, type <%= Name %>Values<% } %> } from './<%= Name %>.values';

/**
 * Module with controller for <%= Name %> component.
 *
 * @module <%= moduleName %>/controller
 */
<% if (flow) { %>
/**
 * Shape of props for <%= Name %>Controller.
 *
 * @memberof <%= moduleName %>/controller
 */
export type <%= Name %>ControllerProps = {
  onSubmit: $PropertyType<FormProps<<%= Name %>Values>, 'onSubmit'>
};

/**
 * Shape of <%= Name %>Controller's State.
 *
 * @memberof <%= moduleName %>/controller
 */
type <%= Name %>ControllerState = null;

/**
 * Shape of <%= Name %>Props for Form component to render <%= Name %>View.
 *
 * @memberof <%= moduleName %>/controller
 */
type <%= Name %>Props = {
  ...$Exact<<%= Name %>ViewProps>,
  onSubmit: *,
  component: *,
  fieldRules: *,
  validate: *,
  } & FormProps<<%= Name %>Values>;
<% } %>
/**
 * Controller for <%= Name %> form.
 *
 * @extends React.PureComponent
 * @memberof <%= moduleName %>/controller
 */
export class <%= Name %>Controller extends React.PureComponent<% if (flow) { %><<%= Name %>ControllerProps, <%= Name %>ControllerState><% } %> {
  // Uncomment default props if need
  // static defaultProps = {};

  /**
   * Method to generate properties for view part of component.
   *
   * @returns {<%= Name %>ViewProps} Props for view part of component.
   */
  getViewProps()<% if (flow) { %>: $Exact<<%= Name %>ViewProps><% } %> {
    return {};
  }

  /**
   * Method to generate properties for form's view part's wrapper.
   *
   * @returns {<%= Name %>Props} Props for form's view part's wrapper.
   */
  getFormProps()<% if (flow) { %>: $Exact<<%= Name %>Props><% } %> {
    const { onSubmit } = this.props;

    return {
      ...this.getViewProps(),
      onSubmit,
      component: <%= Name %>View,
      fieldRules: <%= name %>FieldRules,
      validate: validate<%= Name %>,
    };
  }

  /**
   * React's method to render component.
   *
   * Renders form with view part of component.
   *
   * @returns {?React.Node} Form with view part of <%= Name %> or possible `null`.
   */
  render() {
    return React.createElement(Form, this.getFormProps());
  }
}
